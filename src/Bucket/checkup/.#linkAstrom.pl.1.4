#!/usr/bin/env perl
# compute the orbits from all the mpc lines associated with a particular 
# object (based on the official designation)

use strict;
use warnings;
use Bucket::MOP;
use Bucket::Control;
use File::Temp qw/ tempfile tempdir /;


sub orbit_update { 
    my $object=Bucket::MOP->new("object");
    my $source=Bucket::MOP->new("source");
    my $measure=Bucket::MOP->new("measure");
    my $resid=Bucket::MOP->new("residuals");
    $resid->createTable();
    my $orbit=Bucket::MOP->new("orbits");
    $orbit->createTable();
    my $abg=Bucket::MOP->new("abg");
    $abg->createTable();

    #which object are we looking for.
    $object->{'official'}=shift;
    print "Computing Orbit and Residuals for ".$object->{official}."\n";

    my $sql = "SELECT mpc, measure FROM measure m JOIN object o ";
    $sql .= "on o.provisional=m.provisional WHERE official LIKE '".$object->{official}."' order by measure";
    my $dbh = $source->{_DBH};
    my $sth = $dbh->prepare($sql);
    $sth->execute();
    my @measure;
    open (MPC,"| ($Bucket::MOP::fitradec > ".$object->{official}.".abg) >& ".$object->{official}.".res");
    while ( my $row=$sth->fetchrow_hashref ) {
	print MPC $row->{'mpc'}."\n";
	$measure[++$#measure]=$row->{'measure'};
    }
    close(MPC);
    ## check the residuals on the new orbit
    open (RES,"< ".$object->{official}.".res");
    while ( <RES> ) {
	next if ( $_ =~ m/^Best/ || $_ =~ m/^obs/ ) ;
	my ($obs, $time, $x, $x_resid, $y, $y_resid) =
	    split ;
	$resid->{'measure'}=$measure[$obs];
	$resid->{'x_resid'}=$x_resid;
	$resid->{'x'}=$x;
	$resid->{'y'}=$y;
	$resid->{'time'}=$time;
	$resid->{'y_resid'}=$y_resid;
	$resid->deleteRow("measure = ".$measure[$obs]);
	$resid->insertRow;
    }
    close(RES);
    open (ABG,"< ".$object->{official}.".abg");
    $abg->{official}=$object->{official};
    $abg->{abg}="";
    $orbit->{official}=$object->{official};
    while ( <ABG> ) {
	$abg->{abg} .= $_;
    }
    $abg->deleteRow("official LIKE '".$orbit->{official}."'");
    $abg->insertRow();
    close(ABG);
    open(AEI,"abg_to_aei < ".$object->{official}.".abg |");
    while(my $line = <AEI>){
	chomp $line;
	$line =~ /^#/ and next;
	### just get the lines we're interested in
	($orbit->{a}, $orbit->{e}, $orbit->{i}, $orbit->{Node}, $orbit->{peri}, $orbit->{time} ) = split ' ', $line;
	$line =<AEI>;
	chomp $line;
	$line =~ s/^..//;
	($orbit->{da}, $orbit->{de}, $orbit->{di}, $orbit->{dNode}, $orbit->{dperi}, $orbit->{dtime} ) = split ' ', $line;
	last;
    }
    close(AEI);
    $orbit->deleteRow("official LIKE '".$orbit->{official}."'");
    $orbit->insertRow();
    unlink $object->{official}.".abg";
    unlink $object->{official}.".res";

}

sub acos { 
    atan2( sqrt(1 - $_[0] * $_[0]), $_[0] ) 
    }


## Get a list of all the official object names


sub fuse {
    ### Fuse together known objects with unlinked astrometry
    ### fuse takes on arguement --- the official designation of the object to 
    ### look for new astrometry of.
    print "\a\a\n\n\n\n\n\n";
    my $object=Bucket::MOP->new("object");
    my $extra = Bucket::MOP->new("measure");
    my $abg = Bucket::MOP->new("abg");
    $object->{official}=shift;
    $abg->selectRows({WHERE => "official LIKE '".$object->{official}."'"});
    $abg->fetchRow();
    my $abg_filename= $object->{official}.".abg";
    print "****************** $object->{official} ********************\n";
    open (ABG,"> $abg_filename");
    print ABG $abg->{'abg'};
    close(ABG);
    ### let the users know the starting point
    ###print STDERR "Current orbit \n";
    system ("abg_to_aei < $abg_filename | head -6 | tail -3 ");
    print "\n";
    print "Current fit orbit gives:\n";
    print "   obs  time        x      x_resid       y   y_resid\n";

    ### ABG is now the current official ABG file.
    my $resid = Bucket::MOP->new("residuals");
    

    ### get the list of dates for measures that don't have an official object designation
    #### build the SQL
    
    my $sql = "SELECT floor(mjdate) date, m.provisional, observatory FROM ";
    $sql .= " measure m LEFT JOIN object o ON m.provisional LIKE o.provisional ";
    $sql .= " WHERE o.official IS NULL group by floor(mjdate) order by floor(mjdate) ";

    
    #### get db connection for this SQL (the Table module doesn't have tools for joins).
    my $dbh = $object->{_DBH};
    my $sth = $dbh->prepare($sql);
    $sth->execute();

    my $rsql = "SELECT r.measure as measure, time, x, x_resid, y, y_resid FROM residuals r JOIN measure m ON r.measure=m.measure JOIN object o ON m.provisional LIKE o.provisional WHERE o.official LIKE '".$object->{official}."' order by time ";
    my $sth2 = $dbh->prepare($rsql);
    $sth2->execute();
    while ( my $row = $sth2->fetchrow_hashref ) { 
	printf "%6d %9.4f %+10.3f %+7.3f %+10.3f %+7.3f\n", 
	$row->{measure},$row->{time}, $row->{x}, $row->{x_resid}, $row->{y}, $row->{y_resid};
    }

    
    ### flip through those dates, compute the position and see if the source is inside the error
    ### ellipse




    print STDERR "*****************************************************************************\n";



    ### an array to hold all the provisional candidates in
    my @provisional;

    ### loop over each day looking for the targets that work.
    while ( my $row = $sth->fetchrow_hashref ) {
	
	my ($raRAD, $decRAD, $dra, $ddec, $ang ) = Bucket::MOP::predict($abg_filename,$row->{'date'}-0.5,568);
	my ($raRAD2, $decRAD2, $dra2, $ddec2, $ang2 ) = Bucket::MOP::predict($abg_filename,$row->{'date'}+0.5,568);
	
	my $measure = Bucket::MOP->new("measure");

	### angular seperation between the candidate location and error ellipse
	my $x1 = cos($raRAD)*cos($decRAD);
	my $y1 = sin($raRAD)*cos($decRAD);
	my $z1 = sin($decRAD);

	### for the error ellipse we use either the motion through the day or size of the
	### error ellipse
	my $err_circ = acos(cos($raRAD2)*cos($decRAD2)*$x1 + sin($raRAD2)*cos($decRAD2)*$y1 + sin($decRAD2)*$z1);
	$err_circ = 3.0*sqrt($dra**2+$ddec**2)/(57.3*3600.0) > $err_circ ? sqrt($dra**2+$ddec**2)/(57.3*3600.0)*3.0 : $err_circ ;
	my $dangle = "acos(";
	$dangle .= "cos(ra_rad)*cos(dec_rad)*$x1";
	$dangle .= " + sin(ra_rad)*cos(dec_rad)*$y1";
	$dangle .= " + sin(dec_rad)*$z1";
	$dangle .= ")";
	print "$dangle, $err_circ \n";

	my $mjdate = $row->{'date'};

	my %select = ( "WHERE" => "$dangle < 5.0*$err_circ AND mjdate < $mjdate+1 and mjdate > $mjdate-1 ",
		       "GROUP" => "provisional");
	
	next unless $measure->selectRows(\%select) ;

	while ( my $res=$measure->fetchRow ) {

	    next if ( $object->selectRows({"WHERE" => " provisional LIKE '".$measure->{'provisional'}."'"}) );

	    ### this line could be a new observation of the source
            ### $measure->{'provisional'} is the astrometry of interest
    
	    my $sql = "SELECT mpc, measure, official, file_id FROM measure m LEFT JOIN object o on o.provisional=m.provisional WHERE official LIKE '".$object->{official}."' or (official IS NULL AND m.provisional LIKE '".$measure->{'provisional'}."' ) order by measure ";
	    my $dbh = $extra->{_DBH};
	    my $sth = $dbh->prepare($sql);
	    $sth->execute();
	    my @new_measure;
	    open (MPC,"| ($Bucket::MOP::fitradec > ".$measure->{'provisional'}.".cand.abg) >& ".$measure->{provisional}.".cand.res");
	    open (FLIST,"> ".$measure->{provisional}.".cand.naillist");
	    open (UNI,"> ".$measure->{provisional}.".cand.ast");
	    while ( my $row=$sth->fetchrow_hashref ) {
		print MPC $row->{'mpc'}."\n";
		print UNI $row->{'mpc'}."\n";
		#print $row->{'official'}."\n";
		if ( ! $row->{'official'} ) {
		    $new_measure[++$#new_measure]=$row->{'mpc'};
		    if ( $row->{'file_id'} ) {
		        print FLIST $row->{'file_id'}."\n" unless ( $row->{'file_id'} =~ m/unknown/ );
		    }
		} else {
		    $new_measure[++$#new_measure]=0;
		}
	    }
	    close(MPC);
	    close(UNI);
 	    close(FLIST);
	    
	    ## check the residuals on the new orbit
	    my $reject=0;
	    open (RES,"< ".$measure->{provisional}.".cand.res");
	    while ( <RES> ) { 
		!/^[\s\.\d+-]*$/ && next;
		my ($obs, $time, $x, $x_resid, $y, $y_resid) =
		    split ;
	        if ( sqrt($x_resid**2 + $y_resid**2) > 1.5   ) {
		    $reject=1;
		    last;
		}
	    }
	    close (RES);
	    next if $reject ;
	    ## check that the orbit is NOT hyperbolic
	    open (ABG,"< ".$measure->{provisional}.".cand.abg");
	    $reject=-1;
	    while (<ABG>) {
		next unless m/^\# a=/;
		warn "Bad ABG content in ".$measure->{provisional}.".cand.abg" && last
		    unless m/^\#.*a=([\+\-\d]\d*[\.\d]\d*).*e=([\+\-\d]\d*[\.\d]\d*).*i=([\+\-\d]\d*[\.\d]\d*).*/;
		my ($a, $e, $i ) = ($1, $2, $3);
		if ( $a < 0 )  {
		    $reject =1 ;
		}else {
		    $reject =0;
		}
		last;
	    }
	    next if ( $reject );
	    push @provisional, $measure->{'provisional'};
	    print STDERR "********* ".$measure->{'provisional'}." ===> ".$object->{'official'}."********** \n";
	    print STDERR "New fit gives \n";
	    system("abg_to_aei < ".$measure->{provisional}.".cand.abg | head -6 | tail -3");
	    print STDERR "\n\n\n";
	    open (RES,"< ".$measure->{provisional}.".cand.res");
	    while ( <RES> ) {
		if ( $_ =~ m/^Best/ || $_ =~ m/^obs/ ) {
		    print STDERR "   ".$_;
		    next;
		}
		my ($obs, $time, $x, $x_resid, $y, $y_resid) =
		    split ;
		if ( $new_measure[$obs] ) {
		    print STDERR "***";
		} else {
		    print STDERR "   ";
		}
		print STDERR ;		
	    }
	    close(RES);
	    unlink $measure->{provisional}.".cand.res";
	    unlink $measure->{provisional}.".cand.abg";
	    foreach my $line ( @new_measure ) {
		print STDERR $line."\n" if ( $line );
	    }
	}
    }
    return 0 if @provisional < 1;
    print STDERR "\n";
    print STDERR "Which choice of provisional object \n should be added to the official astrometry for ".$object->{official}." \n";
    my $num=0;
    print STDERR "  -1 ) NONE \n";
    foreach my $prov ( @provisional ) {
	printf STDERR "%4d ) $prov \n", $num;
	$num++;
    }
    my $ans = '';
    while ( <STDIN> ) {
	next unless  ( m/([+-]?[0-9]+)/ ) ;
	$ans= $1;
	last if ( $ans > -2 && $ans < $num );
    }
    return 0 unless ( $ans != -1 ) ; 
    ### Now we need to call uni with the astrometry file and produce the 
    ### final astrometric output.
    $object->{'provisional'}=$provisional[$ans];
    print STDERR "Run UNI to confirm the detection? (y/n) ";
    $ans=<STDIN>;
    chomp $ans;
    my $insert=1;
    $insert = system("uni.pl -o ".$object->{'provisional'}.".cand") if $ans =~ m/y/;
    unlink $object->{'official'}.".abg";
    unlink $object->{'provisional'}.".cand.ast";
    unlink $object->{'provisional'}.".cand.naillist";
    unlink $object->{'provisional'}.".cand.res";
    unlink $object->{'provisional'}.".cand.abg";
    if ( $insert ) {
	print STDERR "Added measurements from $object->{provisional}\n"
	    if $object->insertRow;
    }
    return 1;
}

sub new_object {
    ### select the provisional designation with the most observations and 
    ### make that a new object.
    
    my $sql = "SELECT m.provisional provisional, count(*) N ";
    $sql .= " FROM measure m LEFT JOIN object o ON m.provisional LIKE o.provisional ";
    $sql .= " WHERE o.official IS NULL AND m.provisional LIKE 'pa%' ";
    $sql .= " GROUP BY  m.provisional ORDER BY N DESC ";
    my $object = Bucket::MOP->new("object");
    my $dbh = $object->{_DBH};
    my $sth = $dbh->prepare($sql);
    my $rv = $sth->execute();
    die "Bad RV from DBH \n" unless $rv;
    while ( my $row = $sth->fetchrow_hashref() ) {
	print STDERR "Looks like ".$row->{provisional}." has ".$row->{N}." measures and is a new object.\n";
	print STDERR "Add this to the object catalog?";
	my $ans='y';
	#my $ans = <STDIN>;
	$ans =~ /y/ or next;
	my $insert=1;
	print STDERR "Check with UNI??";
	#$ans = <STDIN>;
	$ans='n';
	if ($ans =~ /y/) {
	    my $sql="SELECT mpc FROM measure WHERE provisional LIKE '".$row->{provisional}."'";
	    my $sth=$dbh->prepare($sql);
	    my $rv = $sth->execute();
	    die "Bad RV from DBH\n" unless $rv;
	    open(MPC,"> ".$row->{provisional}.".ast");
	    while (my $ast=$sth->fetchrow_hashref()){
	    	print MPC $ast->{mpc}."\n";
		}
            $insert = system("uni.pl -o ".$row->{'provisional'}) ;
        }
	if( $insert ) {
	  $object->{official}=$row->{provisional};
	  $object->{provisional}=$row->{provisional};
	  $object->insertRow;
	  return $object->{official};
	}
    }
    return 0;
}
    
	  
### First update the abg files and orbits in the db tables.
my $object=Bucket::MOP->new("object");
$object->createTable();
my $abg = Bucket::MOP->new("abg");
$abg->createTable();
my $obj_dbh=$object->{_DBH};

my $this_object = shift;
my $where ='';
if ($this_object ) {
    $where = " WHERE official LIKE '$this_object'";
}

my $obj_sql="SELECT official, count(*) nobs FROM object o JOIN measure m ON o.provisional LIKE m.provisional $where GROUP BY o.official order by nobs desc";
print STDERR $obj_sql."\n";
my $obj_sth=$obj_dbh->prepare($obj_sql);
my $obj_rv = $obj_sth->execute();
print STDERR "Updating orbits of known objects\n";

while ( my $obj_row = $obj_sth->fetchrow_hashref){
    do {
	orbit_update($obj_row->{official});
#     }
    } until fuse($obj_row->{official})==0;
}

#exit unless ! $where;
print STDERR "Searching for new objects in observations table\n";
while ( my $new_object=new_object()) {
    do {
	orbit_update($new_object);
#    }
    } until fuse($new_object)==0;
}


print STDERR "all done\n";
