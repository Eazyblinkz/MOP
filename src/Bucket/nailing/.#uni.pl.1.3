#!/usr/bin/env perl
# uberNagelIndex

## this script runs the nailing show.  

=head1 SYNOPSIS
B<uni.pl> --object object

Given the name of an object uni looks for the files $object.ast and 
$object.naillist.  The .ast file is run through I<predict> to determine the
orbit of the object.  Then the mySQL DB is searched using I<db_search.pl> to
find the frames that may contain the object.  Once the target is located 
I<confirm.pl> is used to display the frames and get the MPC formatted lines.

=cut
;
#use Bucket::MOP;
use Bucket::Control;
use Switch;
use File::Temp qw/ tempfile tempdir /;
use Getopt::Long;
use Pod::Usage;
### strict and warnings are strongly recommend for all perl scripts
use strict;
use warnings;

my ($debug, $object, $verbose);
$debug="";
GetOptions('d|debug' => \$debug,
	   'o|object=s' => \$object,
	   'v|verbose' => \$verbose ) || pod2usage(2);

#### the FINAL output goes into

chomp $object;

$object || pod2usage();
$debug = "--debug" if $debug;
my $resfile = $object.".uni";

my $ast = $object.".ast";
-e $ast || die "The file $ast doesn't appear to be in the path? \n";

my $fit_radec = `which fit_radec`;
chomp $fit_radec;
-e $fit_radec || die "Cann't find the executable fit_radec? \n";
my $version = `$fit_radec -v`;
$version =~ m/Release2/ || warn "Expecting Release2 of fit_radec. \n";

## run the .ast file through fit_radec 
my $abg = $object.".abg";
my $resid = $object.".resid";

## send the output of fit_radec to an abg file 

system("($fit_radec < $ast > $abg) >& $resid ")==0 || die "Failed to run the fit_radec program \n";
system("grep Chi $abg")==0 || die "Failed to get a .abg file\n";
system("grep a= $abg")==0 || die "Failed to get a .abg file\n";
system("cat $resid")==0 || die "Failed to get the residuals file \n";
print STDERR "Do you wish to continue checking y/n ?";
my $ans = <STDIN>;
chomp $ans;
$ans =~ /y/ || die "Bye then\n";


### search the mySQL DB for frames that are useful
MOP_execute("db_search.pl"," $debug --abg $abg --flist $object.naillist > $object.flist");
die "db_search failed\n" if ( $Bucket::Control::err ) ;
### Do the fit, keeping the STDERR and displaying the STDOUT
my ($mh1, $mpc1) = tempfile($object."XXXX");
my ($mh2, $mpc2) = tempfile($object."XXXX");
my $mpc = $object.".MPC";

my @frames; #  This will be the array of frames that astrometry is coming from.
my %lines; # the has array of lines of astrometry.
 
### loop here giving multiple chances at getting the right object
### for the astrometry
do { 
    unlink($mpc);
    warn "uni.pl is using temp file $object.MPC for confirm call\n" if ($debug);
    MOP_execute("confirm.pl"," --sec 32 --frames $object.flist $debug") ;
    warn "back from confirm.pl \n";
    die "confirm.pl failed \n" if ( $Bucket::Control::err ) ;
    
### The line returned from confirm MAY contain astrometric lines
### using the same files as the input .ast file, or may not.
### Choice from here are
###    a) Use the entries returned by confirm to replace the previous lines
###    b) reject the lines from confirm.
###    c) some combination.
    
### scan in all the MPC lines from both files, keying them on the
### name of the frame they are from [should be unique]
    
    my $record;
    foreach my $file ( $ast, $mpc) {
	open (MPC,"<$file") 
	    || die "What happended to $ast? \n";
	$file =~ s/\./_/;
	while(<MPC>) {
	    if ( /^\#L/ ) {
		## start of a record
		##/^.*([1-9][0-9]{5}[op]_[0-3][0-9]).*/;
		/^#L\s*(\S*).*/;
		$record = $1;
		warn "Trying to read info for $record\n" if ( $debug);
		$lines{$record}{$file} = ();
	    }
	    push @{$lines{$record}{$file}},$_;
	    if ( !/#/ ) {
		 ## only allow one line of astrometry per file/object combo
		 $record = 'foriegn' ;
	     }
	}
	close(MPC);
    }
### the hash %ast contains all the info now.
### foreach fit combination give the orbit
### and the Chi-square along with the residuals
### start with just the input astrometry.
### then use the input + new astrometry.
### then the input + overwritten astrometry.
    
### get the complete list of frames [assumes the exposure number 
### move to larger 'sort values' with time.
    @frames = sort keys %lines;
    
### print the line from the input astrometry using in preference to the 
### lines returned by confrim.  in the second file put the lines from confirm
### in preference to those from the input
    foreach my $frame ( @frames ) { 
	if ( $lines{$frame}{$ast} && @{$lines{$frame}{$ast}}>1 ) {
	    foreach my $line ( @{$lines{$frame}{$ast}} ) {	
		print $mh1 $line ; 
	    }
	} elsif ( $lines{$frame}{$mpc}&& @{$lines{$frame}{$mpc}}>1 ) {
	    foreach my $line ( @{$lines{$frame}{$mpc}} ) {  
		print $mh1 $line;
	    }
	}
	if ( $lines{$frame}{$mpc}&& @{$lines{$frame}{$mpc}}>1 ) {
	    foreach my $line ( @{$lines{$frame}{$mpc}}  ) {
		print $mh2 $line;
	    }
	} elsif ( $lines{$frame}{$ast}&& @{$lines{$frame}{$ast}}>1 ) {  
	    foreach my $line ( @{$lines{$frame}{$ast}} ) {  
		print $mh2 $line;
	    }
	}
    }
    close ($mh1);
    close ($mh2);
    
    foreach my $file ( $mpc1, $mpc2 ) {
	system("($fit_radec < $file > $file.abg) >& $file.resid ")==0 
	    || warn "fit_radec failed for $file\n";
    }
    
## now present the results to the user
    print "\n\n======== SOLUTION A ==========\n";
    print "input astrometry\n";
    system("grep Chi $abg")==0 || warn "Failed to get original .abg file\n";
    system("grep a= $abg")==0 || warn "Failed to get original .abg file\n";
    system("grep Bar $abg")==0|| warn "Failed to get original .abg file\n";
    system("cat $resid")==0 || warn "Failed to get original residuals file \n";
    
    print "\n\n======== SOLUTION B ==========\n";
    print "\b Original + nailing/checkup\n";
    system("grep Chi $mpc1.abg")==0 || warn "Failed to get .abg file\n";
    system("grep a= $mpc1.abg")==0 || warn "Failed to get .abg file\n";
    system("grep Bar $mpc1.abg")==0|| warn "Failed to get original .abg file\n";
    system("cat $mpc1.resid")==0 || warn "Failed to get residuals file \n";
    
    print "\n\n======== SOLUTION C ==========\n";
    print "Over-ride INPUT astrometry\n";
    system("grep Chi $mpc2.abg")==0 || warn "Failed to get .abg file\n";
    system("grep a= $mpc2.abg")==0 || warn "Failed to get .abg file\n";
    system("grep Bar $mpc2.abg")==0|| warn "Failed to get original .abg file\n";
    system("cat $mpc2.resid")==0 || warn "Failed to get residuals file \n";
    
### get rid of the temp fit_radec in/output files
    foreach my $file ( $mpc1, $mpc2 ) {
	unlink("$file" );
	unlink("$file.resid");
	unlink("$file.abg");
    }
    
    
### Given the result of fit_radec the user can 
### now select the combination of astrometry to call "official"
    
    $ans="";
    do {
	print "Accept solution (A) (B) (C) OR (S)tart again OR (E)xit? ";
	$ans = <STDIN>;
	chomp $ans;
    } until ($ans =~ /[ABCES]/ );
    
} until ( ! ($ans =~ /S/) ) ;

open (MPC,">$resfile");
foreach my $frame ( @frames ) { 
    switch ($ans) {
	case /A/ {
	    #### Just give the input astrometry
	    if ( $lines{$frame}{$ast} ) {
		foreach my $line ( @{$lines{$frame}{$ast}} ) {	
		    print MPC $line ; 
		}
	    }
	} 
	case /B/ {
	    #### Give the input astrometry and the new astrometry
	    if ( $lines{$frame}{$ast}  ) {
		foreach my $line ( @{$lines{$frame}{$ast}} ) {	
		    print MPC $line ; 
		}
	    } elsif ( $lines{$frame}{$mpc} ) {
		foreach my $line ( @{$lines{$frame}{$mpc}} ) {  
		    print MPC $line;
		}
	    }
	}
	case /C/ {
	    ### give just the stuff that was marked on these exposure
	    ### plus stuff from input if nothing marked
	    ### Here we output the line from confirm, even if there is no associated astrometry
	    ### unless there is a line in the input astrometry file.
	    if ( $lines{$frame}{$mpc}  && (@{$lines{$frame}{$mpc}}>1 || !$lines{$frame}{$ast}) ) {
		foreach my $line ( @{$lines{$frame}{$mpc}}  ) {
		    print MPC $line;
		}
	    } elsif ( $lines{$frame}{$ast} ) {  
		foreach my $line ( @{$lines{$frame}{$ast}} ) {  
		    print MPC $line;
		}
	    }
	}
	case /E/ {
	    print MPC "# User exited without selecting astrometry\n";
	}
    }
}
close (MPC);
    
### clean up.
unlink($abg);
unlink($resid);
unlink("$object.MPC");
unlink("$object.flist");

exit(0);
