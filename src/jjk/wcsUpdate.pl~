#!/usr/bin/perl -w

## DETERMINE THE Astrometric projection of a CD image and write that to the image header

use Getopt::Long;
use Pod::Usage;
use strict;
use warnings;
use File::Basename;

my $me = basename($0);
my $DR2D = 180.0/3.1415972;

$ENV{"SEX_CONFIG"} || 
    die "Define the environment variable SEX_CONFIG.";


my $configfile = "$ENV{SEX_CONFIG}/default.sex";

-f $configfile || die "Cann't acceess the sextactor configuration $configfile";

sub logmsg {
	my $msg = shift(@_);
	my $name = $0;
	print STDERR "$name: $msg \n";
	return;
}

### default parameter settings
my $help = 0;  ## do you want the help page?
my $root = "";  ## name of the image to do solution for
my $status =0;  ## Status of subrouting calls, moslty for SLA routines
my $i = 1;  ## everyone body needs a counter.
my $verbose; ## what's happening

my $force=0;
my $quiet=1;
my $dozp =0 ;

my $result = GetOptions('h|help|?' => \$help
			,'f|frame=s' => \$root
			,'v|verbose+' => \$verbose
			,'quiet' => \$quiet,
			,'dozp'=> \$dozp,
			,'force'	=> \$force
			) || pod2usage();

## Get the name of the image from the input file
$root =~ s/.fits$//;
my $image = "$root.fits";

## Set the variable for the wcsTools -v (verbose) flag
my $wcs_verbose= $verbose ? "-v" : "" ;

## Set the output to queit mode if flagged
my $output = "";
$output = " 2>>/dev/null" if ( $quiet ) ;

## The USNO catalog file needs to have this name for imwcs to
## understand the format

my $usno_stars = "usno_stars";


### START WORKING

### READ the ORIGINAL RA and DEC from the IMAGE HEADER
my $cmd = "xy2sky -d $image 1024 2048  ";
logmsg ("$cmd") if ( $verbose );
my $rlist = `$cmd`;
my @list = split ' ', $rlist;
my $RAdeg = $list[3];
my $DECdeg = $list[4];


my $catfile = "stars.sex";
my $coo = "$root.coo";
unlink $coo;
my $center = "$root.cen";
unlink $center;

## run sEXTRACTOR on the image
my $thresh = 1.5;
logmsg ("Using Sextractor config file: $configfile") if ($verbose) ;
$cmd = "sex -c $configfile $image -DETECT_THRESH $thresh -ANALYSIS_THRESH $thresh -SATUR_LEVEL 65000 -CATALOG_NAME $catfile ";
logmsg ("$cmd") if ( $verbose );
system($cmd.$output) == 0  or die "SEX returned error code: $? \n" ;

## sExtractor gives poor centroids, use IRAF to get better ones.
## Also reject bright stars inside the center.csh task
$cmd = "center.py --image $image --input $catfile --output $coo";
logmsg ($cmd) if ( $verbose ) ;
$result=`$cmd$output`;

### Now select the brights 200 stars that pass the center test
$cmd ="sort -n +2 $coo | head -250 | grep -v \"#\" > $center";
logmsg($cmd) if ( $verbose ) ;
system($cmd) == 0 or die "SORT returned error code: $?\n";

## Get the USNO catalog stars
$cmd = "get_usno.pl --ra $RAdeg --dec $DECdeg --file $usno_stars";
logmsg ( $cmd) if ( $verbose);
$result = `$cmd$output`;


## Build the WCS using the wcsTools
$cmd = "imwcs -s 2.0 $wcs_verbose -h 200 -c $usno_stars -o -d $center -w $image ";
logmsg ($cmd) if ( $verbose ) ;
$result = `$cmd$output`;
logmsg($result) if ( $verbose ) ;

## convert the USNO star list into a format that sky2xy will like
my $radec= "usno_radec";
unlink $radec;
$cmd = " awk '{ print \$2 , \$3 } ' < $usno_stars > $radec ";
logmsg ($cmd) if ( $verbose ) ;
system($cmd);

## convert the RA/DEC to x/y using the current wcs solution
my $usno_coo = "usno_coo";
unlink $usno_coo;
$cmd = " sky2xy $image \@$radec | grep -v off | awk ' { print \$5, \$6 } ' > $usno_coo";
logmsg ($cmd) if ( $verbose ) ;
system($cmd);

## compute the centroids and reject the saturated stars (done in center.py)
my $usno_cen = "usno_cen";
unlink $usno_cen;
$cmd = "center.py --image $image --input $usno_coo --output $usno_cen ";
logmsg ($cmd) if ( $verbose ) ;
$result = `$cmd$output`;

## Refind the WCS with these good stars
$cmd = "imwcs -s 2.0 $wcs_verbose -n 8 -o -h 200 -c $usno_stars -d $usno_cen  -w $image";
logmsg($cmd) if ( $verbose ) ;
$result = `$cmd$output`;
logmsg($result) if ( $verbose ) ;

## Find all the stars the match USNO candidates
$cmd = "immatch -h 200 -f -d $usno_cen -c $usno_stars $image > $root.immatch";
logmsg($cmd) if ($verbose);
$result  = `$cmd$output`;
logmsg($result) if ( $verbose) ;

## Compare the matched star list to the available list to test goodness of fit.
$result = `grep match $root.immatch`;
$result =~ m/\D*(\d*)\D*(\d*).*/;
my $frac = 0;
$frac = $1/$2 if $2 > 4;
print STDERR "wcsUpdate: $frac ($1/$2) of USNO stars matched for $root\n";

### if the fit passed then mark the header and exit with 0 else exit with 1
my $code = $frac > 0.5 ? 0 : -1 ;
my $setres = `sethead $root.fits GETCEN=$code`;

print STDERR $setres if ( $verbose) ;
exit($code);

__END__

=head1 SYNOPSIS

B<wcsUpdate.pl> -f file.fits -v

=head1 OPTIONS

=over 8

=item B<-f> 

Name of the fits file to rebuild the astrometric WCS for.  Checks for WRA keyword and skips file if 
that keyword exists.

=item B<-v>

Blabber on about what you're doing.

=back

=head1 USAGE

The B<wcsUpdate.pl> script uses I<sex> to find stars I<IRAF> to centroid them I<get_usno.pl> to find
the USNO stars in the field I<imwcs> to determine the solution and I<immatch> to check if the solution 
is anygood.  The last line of output is the fraction of USNO catalog stars that were found in the field.

=head1 NOTE

There is currently no 'drop out' if the solution is crap.  Should there be? 
