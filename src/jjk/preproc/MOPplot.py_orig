#!/usr/bin/env python 

import Tkinter
import PIL
import Image
import ImageTk
import pyfits
import numarray
import sys


def zscale(data,contrast,min=100,max=60000):
    """Scale the data cube into the range 0-255"""

    ## pic 100 random elements along each dimension
    ## use zscale (see the IRAF display man page or
    ## http://iraf.net/article.php/20051205162333315
    
    
    import random
    x=[]
    for i in random.sample(xrange(data.shape[0]),50):
        for j in random.sample(xrange(data.shape[1]),50):
	    x.append(data[i,j])
		    
    yl=numarray.sort(numarray.clip(x,min,max))
    n=len(yl)
    ym=sum(yl)/float(n)
    
    xl=numarray.array(range(n))
    xm=sum(xl)/float(n)	


    ss_xx=sum((xl-xm)*(xl-xm))
    ss_yy=sum((yl-ym)*(yl-ym))
    ss_xy=sum((xl-xm)*(yl-ym))
    b=ss_xy/ss_xx
    a=ym-b*xm
    
    z1=yl[n/2] + (b/contrast)*(1-n/2)
    z2=yl[n/2] + (b/contrast)*(n-n/2)
    
    ## Now put the data inbetween Z1 and Z2
    high=data-z1
    z2=z2-z1
    high=numarray.clip(high,0,z2)
    
    ## and change that to 0-255
    high= 256-256*high/z2
    
    ### send back the scalled data
    return high

def flip(root,image):
    root.create_image(0,0,image=image,anchor="nw")
    return

def recen(self,event):
    return
	

def radec2xy(ra,dec):
    """Given the ra/dec return the x-y canvas location
	
    Anticpate the ra is between 0 and 360, dec between -90 and 90"""
    
    ### scale to use the full 720 pixel display area
    x=(ra-226.)/(234.0-226.0)*720.0
    y=720.0-(dec+22)/(-16+22)*720
    if x<0:
	x=0
    if x>720:
	x=720
    if y<0:
	y=0
    if y>720:
	y=720
    return(ra,dec)
	

class kbo:
    """A KBO"""

    
    def __init__(self,name,ra,dec,a,b,theta):
        import ephem,math
        self.desig=name
        self.ra=ephem.hours(math.radians(ra))
        self.dec=ephem.degrees(math.radians(dec))
        self.a=ephem.degrees(math.radians(a))
        self.b=ephem.degrees(math.radians(b))
        self.theta=theta*math.pi/180.0
        res=20
        xcen=180.0*self.ra/math.pi
        ycen=360-180.0*self.dec/math.pi
        ang=self.theta
        
    def __repr__(self):
        return self.desig
    
    def __str__(self):
        return "%s %s %s %f %f %f" % ( self.desig,self.ra,self.dec,self.a,self.b,self.theta)
    

def load_targets(filename):
    """Load the targets from a file"""
    for file in files:
	f=open(file)
	lines=f.readlines()
        kbos=[]
	for line in lines:
            (name,xcen,ycen,a,b,ang)=line.split()
            kbos.append(kbo(name,float(xcen),float(ycen),float(a),float(b),float(ang)))
    return kbos


class plot(Tkinter.Canvas):
    """A plot class derived from the the Tkinter.Canvas class"""

    def __init__(self,root,width=720,height=720,background='white'):
        import ephem
        self.geoFile="megacam.geometry"
        self.rgutter=100
        self.lgutter=20
        self.tgutter=20
        self.bgutter=30
        self.width=width-self.rgutter-self.lgutter
        self.height=height-self.tgutter-self.bgutter
        self.x1=ephem.hours(0)
        self.x2=ephem.hours(1)
        self.y1=ephem.degrees(0)
        self.y2=ephem.degrees(1)
        self.pointings=[]
        self.cx1=0
        self.cx2=self.width
        self.cy1=0
        self.cy2=self.height
        Tkinter.Canvas.__init__(self,root,width=width,height=height,background=background,scrollregion=(0,0,720,720))

    def p2c(self,p):
        """convert from plot to canvas coordinates.

        See also s2p."""
        x=p[0]
        y=p[1]
        return ((x-self.x1)*self.width/(self.x2-self.x1)+self.cx1+self.rgutter,
                self.cy2-self.bgutter-((y-self.y1)*self.height/(self.y2-self.y1)))

    def c2p(self,c=[0,0]):
        """Convert from canvas to plot coordinates.

        See also p2s."""

        x=c[0]
        y=c[1]
        return ((x-self.rgutter-self.cx1)*(self.x2-self.x1)/self.width+self.x1,
                (self.cy2-y-self.bgutter)*(self.y2-self.y1)/self.height+self.y1)

    def box(self):
        """Draw a box around the graph"""

        (u1,v1)=self.p2c((self.x1,self.y1))
        (u2,v2)=self.p2c((self.x2,self.y2))

        self.create_rectangle(u1,v1,u2,v2)

        import math,ephem


        tick_space= ((self.x2-self.x1)/6.0)
        __scale=1.0
        while ( math.fabs(tick_space*__scale) < 1 ) :
            __scale=__scale*10.0
        while ( math.fabs(tick_space*__scale) > 10 ) :
            __scale=_-scale/10.0
        tick_space=(int(__scale*tick_space))/__scale

        num_ticks=int(math.floor(0.5+(self.x2-self.x1)/tick_space)+1)
        for x in range(num_ticks):
            self.tickmark(self.x1+tick_space*x,self.y1)
            label="%s" % ( ephem.hours(self.x1+tick_space*x))
            self.label(self.x1+tick_space*x,self.y1,label,offset=[0,-20])

        tick_space= ((self.y2-self.y1)/6.0)
        __scale=1.0
        while ( math.fabs(tick_space*__scale) < 1 ) :
            __scale=__scale*10.0
        while ( math.fabs(tick_space*__scale) > 10 ) :
            __scale=_-scale/10.0
        tick_space=(int(__scale*tick_space))/__scale
        num_ticks=int(math.floor(0.5+(self.y2-self.y1)/tick_space)+1)
        for x in range(num_ticks):
            label="%s" % ( ephem.degrees(self.y1+tick_space*x))
            self.tickmark(self.x1,tick_space*x+self.y1,orientation=0)
            self.label(self.x1,tick_space*x+self.y1,label,offset=[50,0])


    def tickmark(self,x,y,size=10,orientation=90):
        """Draw a line of size and orientation at x,y"""
        import math
        (x1,y1)=self.p2c([x,y])
        x2=x1+size*math.cos(math.radians(orientation))
        y2=y1-size*math.sin(math.radians(orientation))
        self.create_line(x1,y1,x2,y2)
        
    def label(self,x,y,label,offset=[0,0]):
        """Write label at plot coordinates (x,y)"""
        (xc,yc)=self.p2c([x,y])
        self.create_text(xc-offset[0],yc-offset[1],text=label)


    def limits(self,x1,x2,y1,y2):
        """Set the coordinate boundaries of plot"""
        self.x1=x1
        self.x2=x2
        self.y1=y1
        self.y2=y2

    def center(self,event):
        """center the canvas at the event"""
        import Tkinter
        print event
        (ra,dec)=self.c2p((event.x,event.y))
        dx=self.x2-self.x1
        dy=self.y2-self.y1
        self.x1=ra-dx/2.0
        self.x2=ra+dx/2.0
        self.y1=dec-dy/2.0
        self.y2=dec+dy/2.0
        self.delete(Tkinter.ALL)
        doplot(kbos)

    def reset(self):
        """Expand to the full scale"""
        import Tkinter
        self.delete(Tkinter.ALL)
        resize(kbos)
        doplot(kbos)
        
    def zoom_in(self):
        """Zoom in"""
        import Tkinter
        dx=self.x2-self.x1
        dy=self.y2-self.y1
        self.x1=self.x1+dx/2.0-dx/4.0
        self.x2=self.x2-dx/2.0+dx/4.0
        self.y1=self.y1+dy/2.0-dy/4.0
        self.y2=self.y2-dy/2.0+dy/4.0
        self.delete(Tkinter.ALL)
        doplot(kbos)

    def zoom_out(self):
        """Zoom in"""
        import Tkinter
        dx=self.x2-self.x1
        dy=self.y2-self.y1
        self.x1=self.x1+dx/2.0-dx
        self.x2=self.x2-dx/2.0+dx
        self.y1=self.y1+dy/2.0-dy
        self.y2=self.y2-dy/2.0+dy
        self.delete(Tkinter.ALL)
        doplot(kbos)
        
    def create_ellipse(self,xcen,ycen,a,b,ang,resolution=40):
        """Plot ellipse at x,y with size a,b and orientation ang"""

        import math
        e1=[]
        e2=[]
        ang=ang-math.radians(90)
        for i in range(0,int(resolution)+1):
            x=(-1*a+2*a*float(i)/resolution)
            y=math.sqrt(1-(x/a)**2)*b
            ptv=self.p2c((x*math.cos(ang)+y*math.sin(ang)+xcen,y*math.cos(ang)-x*math.sin(ang)+ycen))
            y=-1*y
            ntv=self.p2c((x*math.cos(ang)+y*math.sin(ang)+xcen,y*math.cos(ang)-x*math.sin(ang)+ycen))
            e1.append(ptv)
            e2.append(ntv)
        e2.reverse()
        e1.extend(e2)
        self.create_line(e1,fill='red',width=2)

    def create_point(self,xcen,ycen,size=10):
        """Plot a circle of size at this x,y location"""

        (x,y)=self.p2c((xcen,ycen))
        x1=x-size
        x2=x+size
        y1=y-size
        y2=y+size
        self.create_rectangle(x1,y1,x2,y2,fill='red',outline='red')
        
    def create_pointing(self,event):
        """Plot the sky coverage of pointing at event.x,event.y on the canavas"""

        import math
        (ra,dec)=self.c2p((event.x,event.y))
        this_camera=camera()
        this_camera.loadGeometry(infile=self.geoFile)
        ccds=this_camera.getGeometry(ra,dec)
        items=[]
        for ccd in ccds:
            (x1,y1)=self.p2c((ccd[0],ccd[1]))
            (x2,y2)=self.p2c((ccd[2],ccd[3]))
            item=self.create_rectangle(x1,y1,x2,y2)
            items.append(item)
        self.pointings.append({"items": items,
                               "camera": this_camera} )

    def plot_pointings(self):
        """Plot pointings on canavs"""

        for pointing in self.pointings:
            items=[]
            for ccd in pointing["camera"].getGeometry():
                (x1,y1)=self.p2c((ccd[0],ccd[1]))
                (x2,y2)=self.p2c((ccd[2],ccd[3]))
                item=self.create_rectangle(x1,y1,x2,y2)
                items.append(item)
            pointing["items"]=items
            
    def move_pointing(self,event):
        """Grab nearest pointing to event.x,event.y and with cursor"""

        xcen=event.x
        ycen=event.y
        (ra,dec)=self.c2p((xcen,ycen))
        closest=None
        this_pointing=None
        for pointing in self.pointings:
            # Find the camera we clicked closest too
            ds=pointing["camera"].separation(ra,dec)
            if this_pointing is None or ds < closest:
                closest=ds
                this_pointing=pointing
        ccds=this_pointing["camera"].getGeometry(ra,dec)
        items=this_pointing["items"]
        for i in range(len(ccds)):
            ccd=ccds[i]
            item=items[i]
            (x1,y1)=self.p2c((ccd[0],ccd[1]))
            (x2,y2)=self.p2c((ccd[2],ccd[3]))
            self.coords(item,x1,y1,x2,y2)

    def list_pointings(self):
        """Print the currently defined FOVs"""

        i=0
        for pointing in self.pointings:
            i=i+1
            name="P"+str(i)
            (sra,sdec)=str(pointing["camera"]).split()
            print "|%-20s|%11s|%11s|%6.1f|%-5d|" % (name,sra,sdec,2000.0,1)
        
class camera:
    """The Field of View of a direct imager"""


    def __init__(self):
        self.geometry=[{"ra":0,"dec":-0.24,"dra":0.95,"ddec": 0.42},
                       {"ra":0,"dec":+0.24,"dra":0.95,"ddec": 0.42}
                       ]
        pass

    def __str__(self):
        import ephem
        return "%s %s" % ( self.ra, self.dec ) 

    def getGeometry(self,ra=None,dec=None):
        """Return an array of rectangles that represent the 'ra,dec' corners of the FOV"""

        import math,ephem
        ccds=[]

        if ra is None:
            ra=self.ra
        if dec is None:
            dec=self.dec
        self.ra=ephem.hours(ra)
        self.dec=ephem.degrees(dec)
        for geo in self.geometry:
            xcen=math.radians(geo["ra"])+ra
            ycen=math.radians(geo["dec"])+dec
            dy=math.radians(geo["ddec"])
            dx=math.radians(geo["dra"]*math.cos(ycen+dy/2.0))
            ccds.append([xcen-dx/2.0,ycen-dy/2.0,xcen+dx/2.0,ycen+dy/2.0])

        return ccds

    
    def separation(self,ra,dec):
        """Compute the separation between self and (ra,dec)"""

        import ephem
        return ephem.separation((self.ra,self.dec),(ra,dec))
    
    def loadGeometry(self,infile="megacam.geometry"):
        """load a mosaic geometry file"""
        
        f=file(infile)
        lines=f.readlines()
        f.close()
        self.geometry=[]
        for line in lines:
            (ra, dec, dra, ddec )=line.split()
            self.geometry.append({"ra": float(ra),
                                  "dec":float(dec),
                                  "dra":float(dra),
                                  "ddec":float(ddec)})

        
        
import optparse

parser=optparse.OptionParser()

(opt,files)=parser.parse_args()
kbos=load_targets(files)

        
root=Tkinter.Tk()
pframe=Tkinter.Frame()
w=plot(pframe)

sx=Tkinter.Scrollbar(pframe,orient=Tkinter.HORIZONTAL)
sx.config(command=w.xview)


sy=Tkinter.Scrollbar(pframe,orient=Tkinter.VERTICAL)
sy.config(command=w.yview)

w.config(yscrollcommand=sy.set, xscrollcommand=sx.set)


cmds=Tkinter.Frame()
Tkinter.Button(cmds,text="Exit",command=sys.exit).pack(side=Tkinter.RIGHT)
Tkinter.Button(cmds,text="Zoom In",command=w.zoom_in).pack(side=Tkinter.LEFT)
Tkinter.Button(cmds,text="Reset",command=w.reset).pack(side=Tkinter.LEFT)
Tkinter.Button(cmds,text="Zoom Out",command=w.zoom_out).pack(side=Tkinter.LEFT)
Tkinter.Button(cmds,text="List Pointings",command=w.list_pointings).pack(side=Tkinter.RIGHT)
cmds.pack(side=Tkinter.BOTTOM)

sx.pack(side=Tkinter.BOTTOM,fill=Tkinter.X)

sy.pack(side=Tkinter.RIGHT,fill=Tkinter.Y)
w.pack(side=Tkinter.RIGHT)
pframe.pack(side=Tkinter.TOP)


import sys

def resize(kbos):

    ra=[]
    dec=[]
    for o in kbos:
        ra.append(o.ra)
        dec.append(o.dec)
        
    ra.sort()
    dec.sort()
    midpt=int(len(ra)/2.0)
    size=max(ra[len(ra)-1]-ra[0],dec[len(dec)-1]-dec[0])
    center=[ra[midpt],dec[midpt]]

    import ephem,math
    w.limits(
        center[0]+size/1.5 ,
        center[0]-size/1.5 ,
        center[1]-size/1.5 ,
        center[1]+size/1.5 )

    
def doplot(kbos):
    """Draw the actual plot"""

    import Tkinter,math
    w.delete(Tkinter.ALL)
    w.box()
    for o in kbos:
        w.create_ellipse(o.ra,o.dec,o.a,o.b,o.theta)
        w.create_point(o.ra,o.dec,size=1)
        w.label(o.ra,o.dec,o.desig,offset=[0,-10])

    w.plot_pointings()

w.bind('<Double-Button-1>',w.create_pointing)
w.bind('<B1-Motion>',w.move_pointing)
w.bind('<Button-3>',w.center)
resize(kbos)
doplot(kbos)

    

root.mainloop()
