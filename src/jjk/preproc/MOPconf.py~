#!/usr/bin/env python

# A script to help with confirming detections of KBOs.

""" Look through all subdirectories for all the 'no_candidate' or 
    'file_id.cands.comb' files.  Building a list of things to check.
    Check if there are gaps in the listing. """


import os, sys,string, sre, pyraf


## read in the .cands.comb file
def read_cands(filename):
    """Read in the contents of a cands comb file"""
    import sre
    
    lines=file(filename).readlines()
    exps=[]
    cands=[]
    coo=[]
    for line in lines:
        if ( line[0:2]=="##" ) :
            break
        exps.append(line[2:].strip())

    for line in lines:
        if ( line[0]=="#" ) :
            continue
        if len(line.strip())==0:
            if len(coo)!=0:
                cands.append(coo)
            coo=[]
            continue
        vals=line.split()
        cols=['x','y','x_0','y_0','flux','size','max_int','elon']
        values={}
        for j in range(len(cols)):
            col=cols.pop().strip()
            val=vals.pop().strip()
            values[col]=float(val)
        coo.append(values)
    cands.append(coo)
    return {'fileId': exps, 'cands': cands}

def discands(record):
    """Display the candidates contained in a candidate record list"""
    import pyfits

    pyraf.iraf.tv()
    display = pyraf.iraf.tv.display
    
    width=128
    
    cands = record['cands']
    exps=   record['fileId']

    ### load some header info from the mophead file
    headers={}
    for exp in exps:
        f = pyfits.open(exp+".fits")
        headers[exp]={}
        for key in ['MJDATE', 'NAXIS1', 'NAXIS2', 'EXPTIME', 'FILTER']:
            headers[exp][key]=f[0].header[key]
        headers[exp]['MJD-OBSC']=headers[exp]['MJDATE']+headers[exp]['EXPTIME']/2.0/3600.0/24.0
        f.close()

    import math,os
    real=0
    cand_total=len(cands)
    for cand in cands:
        cand_total=cand_total-1
        for i in range(len(exps)):
            x2=[]
            y2=[]
            y1=[]
            x1=[]
            fileId=exps[i]
            x2.append(int(min(math.floor(cand[i]['x'])+width,headers[fileId]['NAXIS1'])))
            y2.append(int(min(math.floor(cand[i]['y'])+width,headers[fileId]['NAXIS2'])))
            x1.append(int(max(math.floor(cand[i]['x'])-width,1)))
            y1.append(int(max(math.floor(cand[i]['y'])-width,1)))
        x_1 = max(x1)
        y_1 = max(y1)
        x_2 = min(x2)
        y_2 = min(y2)
        for i in range(len(exps)):
            tvmark=open('tv.coo','w')
            xshift=cand[i]['x']-cand[i]['x_0']
            yshift=cand[i]['y']-cand[i]['y_0']
            tvmark.write('%f %f\n' % ( cand[i]['x'], cand[i]['y']))
            x1=max(x_1 + xshift,1)
            y1=max(y_1 + yshift,1)
            x2=min(x_2 + xshift,headers[exps[i]]['NAXIS1'])
            y2=min(y_2 + yshift,headers[exps[i]]['NAXIS2'])
            cutout = "[%d:%d,%d:%d]" % (x1,x2,y1,y2)
            fileId=exps[i]
            try:
                display(fileId+cutout,i+1)
            except:
                sys.stderr.write("ERROR\N")
            tvmark.close()
            pyraf.iraf.tv.tvmark(i+1,'tv.coo',mark='circle',radii=15)
            os.unlink('tv.coo')
        ### ask if this is a real candidate, take action.
        ans='j'
        sys.stdout.write("%d candidates left\n" % ( cand_total))
        while ans not in ('y', 'n', 'q'):
            sys.stdout.write("Is this a real candidate? (y,n,q)\n")
            ans=sys.stdin.read(2).strip()
        if ans=='y':
            f.open("REAL","a")
            cols=['x','y','x_0','y_0','flux','size','max_int','elon']
            for col in cols:
                f.write("%s\t",col)
            f.write("\n")
            for ii in range(len(exps)):
                for col in cols:
                    f.write("%f\t",cand[i][col])
                f.write("\n")
            f.close()
            real=real+1
        if ans=='q':
            sys.exit(-1)
    return real

cand_list={}
field_list=[]
chip_list=[]

for i in range(36):
    chip = "chip%s" % string.zfill(str(i),2)
    chip_list.append(chip)

total_dirs = 0
for location in sys.argv[1:]:
    parts = location.split('/')
    filename = parts[-1]
    field = parts[-2]
    chip = parts[-3]
    if field not in field_list:
        field_list.append(field)
    if chip not in cand_list:
        cand_list[chip]={}
    if sre.search("astrom",filename) is None:
        cand_list[chip][field]=filename
        total_dirs=total_dirs+1

sys.stderr.write("Must check %d directories\n"  % ( total_dirs))
for chip in chip_list:
    pyraf.iraf.cd(chip)
    if chip not in cand_list:
        sys.stderr.write("No candidate on %s\n" % ( chip))
        conintue
    for field in field_list:
        pyraf.iraf.cd(field)
        if field not in cand_list[chip]:
            sys.stderr.write("%s/%s failed to complete.\n"  % ( chip,field) )
            pyraf.iraf.chdir("..")
            continue
        if cand_list[chip][field]=="no_candidates":
            pyraf.iraf.chdir("..")
            continue
        if sre.search('not_real',cand_list[chip][field]): 
            pyraf.iraf.chdir("..")
            continue
        else:
            sys.stderr.write("Checking candidates in %s %s\n" % ( chip,field))
            if discands(read_cands(cand_list[chip][field])) == 0:
                os.rename(cand_list[chip][field],cand_list[chip][field]+".not_real")
        pyraf.iraf.cd("..")
        
    pyraf.iraf.cd("..")
                    
