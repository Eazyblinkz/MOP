#!/usr/bin/python

## use the xy2skypv code to generate the astrometric values 
## that measure3 would normally produce.

import sys, os
from optparse import OptionParser
import re

if __name__=='__main__':
    parser= OptionParser()
    (opt,args)=parser.parse_args()
    if len(args)!= 1:
        parser.error("You must provide the base .cands.comb image on the command line\n")
    base_image=args[0]
    OK=base_image+".measure3.OK"
    FAILED=base_image+".measure3.FAILED"

    os.system("touch %s" %(FAILED))

    filename_parts=re.match("(\S*p)(\d\d)",base_image).groups()
    extension_num = int(filename_parts[1])
    header_filename= filename_parts[0]+".head"

    cands_filename="%s.cands.comb" % ( base_image)
    if not os.access(cands_filename,os.R_OK):
        parser.error("Failed to open input candidate file %s\n" %( cands_filename))
        
    astrom_header="""##   X        Y        X_0     Y_0          R.A.          DEC                   """

    astrom_filename="%s.measure3.cands.astrom" % ( base_image)
    astrom_file=open(astrom_filename,'w')
    xy_filename="%s.xy" % ( base_image)
    xy_file=open(xy_filename,'w')
    coords=[]
    for cands_line in open(cands_filename):
        if len(cands_line.strip())==0:
            continue
        if cands_line.lstrip()[0]=='#' :
            if "X_0" not in cands_line:
                astrom_file.write(cands_line)
            continue
        v=cands_line.strip().split()
        coords.append(v)
        ## use the _0 coordinates and the transform for the first image
        ## only.  This keeps all meausres on a single solution.
        xy_file.write("%s %s %d\n" % ( v[2],v[3],extension_num))

    xy_file.close()
    ra_filename="%s.radec" % ( base_image)
    if not os.access(header_filename,os.R_OK):
        os.symlink("../../../head/%s" % header_filename,header_filename)
    cmd = 'mxy2skypv %s %s %s' % ( header_filename, xy_filename, ra_filename)
    os.system(cmd)
    astlines=open(ra_filename).readlines()
    for idx in range(len(astlines)):
        v1=astlines[idx].split()
        v2=coords[idx]
        astrom_file.write(" %8.2f %8.2f %8.2f %8.2f %12.7f %12.7f\n" % (float(v2[0]),float(v2[1]),float(v1[2]),float(v1[3]),float(v1[0]),float(v1[1])))
    astrom_file.close()
    os.system("touch %s" % (OK))
    os.unlink(FAILED)

