#!/usr/bin/env perl
#!/usr/cadc/misc/bin/perl

# This is Holman's version of prog2 for the CFHT tno search pipeline.


$failed = `touch "step2matt_jmp.FAILED"`;
open(FAILED,"> step2matt_jmp.FAILED");
print FAILED "step2matt_jmp @ARGV\n";
close(FAILED);
print STDERR "step2matt_jmp @ARGV\n";

use Getopt::Long;
GetOptions('f1|file1:s','f2|file2:s','f3|file3:s','h|help');

# -f1 image_file1 (w/o .fits extension) -f2 image_file2  -f3 image_file3 -h/? help line

$im1 = $opt_f1;
$im2 = $opt_f2;
$im3 = $opt_f3;

if($opt_h == 1){
    print "usage: step2matt -f1 im_name1 -f2 im_name2 -f3 im_name3.\n";
    die;
}elsif($opt_f1 eq ""){
    print "No image file1 specified. All arguments must be specified.\n"."usage: step2matt -f1 im_name1 -f2 im_name2 -f3 im_name3.\n";
    die;
}elsif($opt_f2 eq ""){
    print "No fwhm specified. All arguments must be specified.\n"."usage: step2matt -f1 im_name1 -f2 im_name2 -f3 im_name3.\n";
    die;
}elsif($opt_f3 eq ""){
    print "No detection threshold specified. All arguments must be specified.\n"."usage: step2matt -f1 im_name1 -f2 im_name2 -f3 im_name3.\n";
    die;
}elsif($opt_h != 0){
    print "usage: step2matt -f1 im_name1 -f2 im_name2 -f3 im_name3.\n";
    die;
}

$trans="trans";
$nonstat="non_stationary";


### this program use the translation computed by JMP .. must be run after JMP
$transfile1 = "$im1".".trans.jmp";
$transfile2 = "$im2".".trans.jmp";
$transfile3 = "$im3".".trans.jmp";

$objfile1s = "$im1".".objs";
$objfile2s = "$im2".".objs";
$objfile3s = "$im3".".objs";

$objfile1m = "$im1".".objm";
$objfile2m = "$im2".".objm";
$objfile3m = "$im3".".objm";

$objfile1t = "$im1".".tf";
$objfile2t = "$im2".".tf";
$objfile3t = "$im3".".tf";

rearrange($im1);
rearrange($im2);
rearrange($im3);

`$trans $transfile1 < $objfile1s | sort -n > $objfile1t`;
`rm $objfile1s`;
`$trans $transfile2 < $objfile2s | sort -n > $objfile2t`; 
`rm $objfile2s`;
`$trans $transfile3 < $objfile3s | sort -n > $objfile3t`; 
`rm $objfile3s`;

$unidfile1 = "$im1".".unid.matt";
$unidfile2 = "$im2".".unid.matt";
$unidfile3 = "$im3".".unid.matt";

$thresh = 1.0; # "Stationary threshold". Should get this from the fwhm in the header line.

`$nonstat $thresh $objfile1t $objfile2t $objfile3t >> $unidfile1`;
`$nonstat $thresh $objfile2t $objfile3t $objfile1t >> $unidfile2`;
`$nonstat $thresh $objfile3t $objfile1t $objfile2t >> $unidfile3`;

#`rm $objfile1t $objfile2t $objfile3t`;

`touch "step2matt_jmp.OK"`;

sub rearrange {
    my $im = $_[0];
    my $objfile = "$im".".obj.matt";
    my $objfile_s = "$im".".objs";
    my $objfile_m = "$im".".objm";
    my $unidfile = "$im".".unid.matt";

    open(INFILE,"< $objfile");



    $minflux = 1.0;

    # copying header lines to unid file
    open(OUTFILE,"> $unidfile");
    # copying data lines to s file and to m file, adding a mag to m file.
    open(OUTFILE1,"> $objfile_s");
    open(OUTFILE2,"> $objfile_m");
    while(<INFILE>){
	if ( m/^\#/ ) {
	print OUTFILE $_;
	} else {
	($x, $y, $flux, $area, $flux_max, $elong) = split(' ');
	print OUTFILE1 "$x $y $flux $area $flux_max $elong\n";
	if($flux >0 .0){
	    $mag = -2.5*(log($flux)/log(10));
	}else{
	    $mag = -2.5*(log($minflux)/log(10));
	}
	print OUTFILE2 "$x $y $flux $area $flux_max $elong $mag\n";
        }
    }
    close(INFILE);
    close(OUTFILE1);
    close(OUTFILE2);
    close(OUTFILE);

}

